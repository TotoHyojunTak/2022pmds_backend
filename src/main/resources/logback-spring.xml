<?xml version="1.0" encoding="UTF-8"?>
<configuration>

    <!-- 변수 지정 -->
    <property name="LOG_PATH" value="./logs"/>
    <property name="LOG_PATH_NAME" value="${LOG_PATH}/service.log"/>

    <!-- FILE Appender -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOG_PATH_NAME}</file>
        <!-- 일자별로 로그파일 적용하기 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${LOG_PATH}/service.%d{yyyyMMdd}.log</fileNamePattern>
            <maxHistory>60</maxHistory>
        </rollingPolicy>
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n
            </pattern>
        </encoder>
    </appender>

    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>%d{yyyy-MM-dd HH:mm:ss} [%-5p] [%F]%M\(%L\) : %m%n
            </pattern>
        </encoder>
    </appender>

    <springProfile name="local">
        <logger name="org.springframework.web.filter" level="DEBUG" charset="UTF-8" additivity="false">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </logger>

        <logger name="com.backend" level="DEBUG" charset="UTF-8" additivity="false">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </logger>

        <!-- log4jdbc 옵션 설정 -->
        <logger name="jdbc" level="OFF" />

        <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
        <logger name="jdbc.connection" level="OFF" />

        <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
        <logger name="jdbc.sqlonly" level="DEBUG" />

        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
        <logger name="jdbc.sqltiming" level="OFF" />

        <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다.
         많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
        <logger name="jdbc.audit" level="OFF" />

        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
        <logger name="jdbc.resultset" level="OFF" />

        <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
        <logger name="jdbc.resultsettable" level="OFF" />

        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

    <springProfile name="dev">
        <logger name="org.springframework.web.filter" level="DEBUG" charset="UTF-8" additivity="false">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </logger>

        <logger name="com.backend" level="INFO" charset="UTF-8" additivity="false">
            <appender-ref ref="FILE"/>
            <appender-ref ref="CONSOLE"/>
        </logger>

        <!-- log4jdbc 옵션 설정 -->
        <logger name="jdbc" level="OFF" />
        <!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
        <logger name="jdbc.connection" level="OFF" />

        <!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
        <logger name="jdbc.sqlonly" level="DEBUG" />

        <!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
        <logger name="jdbc.sqltiming" level="OFF" />

        <!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다.
         많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다. -->
        <logger name="jdbc.audit" level="OFF" />

        <!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
        <logger name="jdbc.resultset" level="OFF" />

        <!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
        <logger name="jdbc.resultsettable" level="OFF" />

        <root level="INFO">
            <appender-ref ref="CONSOLE"/>
        </root>
    </springProfile>

</configuration>